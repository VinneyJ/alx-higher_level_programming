The ''7-base_geometry.txt''
============================

Using ''BaseGeometry''
---------------------
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

>>> base1 = BaseGeometry()

>>> base1.integer_validator("size", 5)

>>> base1.integer_validator("size", "jj")
Traceback (most recent call last):
TypeError: size must be an integer

>>> base1.integer_validator("size", "[1, 2, 3]")
Traceback (most recent call last):
TypeError: size must be an integer

>>> base1.integer_validator("size", "5.365")
Traceback (most recent call last):
TypeError: size must be an integer

>>> base1.integer_validator(9, 5)

>>> base1.integer_validator(9, "jj")
Traceback (most recent call last):
TypeError: 9 must be an integer

>>> base1.integer_validator("size", -5)
Traceback (most recent call last):
ValueError: size must be greater than 0

>>> base1.integer_validator(6, -5)
Traceback (most recent call last):
ValueError: 6 must be greater than 0

>>> base1.integer_validator("size")
Traceback (most recent call last):
TypeError: integer_validator() missing 1 required positional argument: 'value'

>>> base1.integer_validator("size", 1, 5)
Traceback (most recent call last):
TypeError: integer_validator() takes 3 positional arguments but 4 were given

>>> base1.area()
Traceback (most recent call last):
Exception: area() is not implemented

>>> base1.integer_validator()
Traceback (most recent call last):
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> base1.integer_validator("size", 0)
Traceback (most recent call last):
ValueError: size must be greater than 0

>>> base1.integer_validator("age", {"Jan": 22, "Feb": 19})
Traceback (most recent call last):
TypeError: age must be an integer

>>> base1.integer_validator("size", (4, 5))
Traceback (most recent call last):
TypeError: size must be an integer

>>> base1.integer_validator("size", None)
Traceback (most recent call last):
TypeError: size must be an integer

>>> base1.integer_validator("", "Joe")
Traceback (most recent call last):
TypeError:  must be an integer

>>> base1.integer_validator("size", 1456e3000)
Traceback (most recent call last):
TypeError: size must be an integer

>>> base1.integer_validator("size", {"Mon", "Thur"})
Traceback (most recent call last):
TypeError: size must be an integer

>>> base1.integer_validator("size", False)
Traceback (most recent call last):
TypeError: size must be an integer

>>> base1.integer_validator("size", float('NaN'))
Traceback (most recent call last):
TypeError: size must be an integer

>>> base1.integer_validator("size", float('inf'))
Traceback (most recent call last):
TypeError: size must be an integer


>>> base1.integer_validator("size", (1,))
Traceback (most recent call last):
TypeError: size must be an integer

>>> base1.area(32)
Traceback (most recent call last):
TypeError: area() takes 1 positional argument but 2 were given

>>> base1.integer_validator("size", [])
Traceback (most recent call last):
TypeError: size must be an integer

>>> base1.integer_validator("size", ())
Traceback (most recent call last):
TypeError: size must be an integer

>>> base1.integer_validator(None, 58)

>>> base2 = BaseGeometry(4)
Traceback (most recent call last):
TypeError: object() takes no parameters
